.data
8			//pokazuje na lopticu (x poz)
0			//
75
0x100	// DEC:256 = p_rgb_matrix
0x140	// DEC:320 = p_frame_sync
0x200	// DEC:512 = p_pb_dec
//^^^^^^^^^^^CONST ABOVE^^^^^^^^^^^

//The variables we can modify
1,0			//	pocetna vrijednost vektora pomjeranja lopte (x y) NPR:(1,0) ide samo pravac desno dok (1,1) ide desno dole
					//Adress: 0x6
3,3			// pocetne koorditate loptice (x y)  Address: 0x8 
0,3			// koordinata lijevog objekta (x y)  Address: 0xa = 10 
7,3 		// koordinata desnog objekta (x y)	 Address: 0xc = 12
-1,-1		// kraj


/*
	Register setup:
	R0 = tmp reg
	R1 = tmp reg
	R2 = tmp reg
	R3 = tmp reg
	R4 = tmp reg
	R5 = p_frame_sync
	R6 = p_pb_dec
	R7 = p_rgb_matrix
*/

.text

default_settings:
	sub R0,R0,R0
	inc R0,R0 
	inc R0,R0
	inc R0,R0
	ld R7, R0 		;; R7 = *p_rgb_matrix
	inc R0,R0
	ld R5, R0 		;; R5 = *p_frame_sync
	inc R0, R0
	ld R6,R0 		;; R6 = 0x200 = y pozicija pomjeranja levog (1 igraca) (0x201 ke y pozicija pomjeranja 2 (desnog) igraca)

frame_sync_rising_edge:
frame_sync_wait_0:
	ld R0,R6
	jmpnz frame_sync_wait_0 
frame_sync_wait_1:
	ld R0,R6
	jmpz frame_sync_wait_1

draw_begin:

draw_ball:
	sub R3,R3,R3
	inc R3,R3 		;; Boja = RED
	sub R0,R0,R0	;; R0 = 0
	ld R4,R0		;; R4 = &(ball.x)
	ld R1, R4 		;; R1 = ball.x
	inc R4,R4 		
	ld R2, R4		;; R2 = ball.y
	shl R2,R2
	shl R2,R2
	shl R2,R2
	add R2,R1,R2
	add R2,R1,R7	;;R2 = (R2*8) + x + 256
	st R3,R2		;;store color in "256 + (y*8) +x"
	
	
	ld R0,R0		;;R0 = 8
draw_players:
	inc R4,R4		;; R4 = &(left_player.x)
	ld R1,R4
	jmps draw_end
	inc R4,R4		;; R4 = &(left_player.y)
	ld R2,R4		;; R1 = left_player.x  R2 = left_player.y
	shl R2,R2
	shl R2,R2
	shl R2,R2		
	add R2,R2,R1	
	add R2,R2,R7	;; R2 = (R2*8) + x + 256 (draw 1st tile)
	st R3,R2		
	add R2,R2,R0	;;draw 2nd tile
	st R3,R2		
	add R2,R2,R0	;;draw 3rd tile
	st R3,R2		
	jmp draw_players
draw_end:

count_frames_begin:
	sub R0,R0,R0
	inc R0,R0
	ld R1, R0 		;; R1 <- frame_cnt
	inc R0,R0 		;;
	ld R2, R0 		;; R2 <- frames_per_heartbeat
	dec R0,R0
	inc R1,R1 		;; frame_cnt++
	sub R2,R2,R1 	;; frame_cnt == frames_per_heartbeat
	jmpz count_frames_heartbeat
	st R1, R0 		;; R1 -> frame_cnt
	jmp frame_sync_rising_edge

count_frames_heartbeat:
	sub R1,R1,R1
	st R1,R0
cout_frames_end:


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
			collision_detection:
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;; Load R1 and R2 and set them as the position of the ball in the next frames
	;; throught this entire function we'll be addressing ball.x as the new ball position
	sub R0,R0,R0	;; R0 = 0 
	ld R3,R0		;; R3 = &(ball.x)
	mov R4,R3
	inc R4,R4
	ld R3,R3
	ld R4,R4		;; R3 = ball.x, R4 = ball.y
	
	ld R1,R0		
	dec R1,R1
	mov R2,R1
	dec R1,R1		;; R1 = &(ball_movement_vector.x)
	ld R1,R1		
	ld R2,R2		;; R1 = ball_movement_vector.x, R2 = ball_movement_vector.y
			
	add R1,R1,R3
	add R2,R2,R4
	;;R1 <- nova x pozcija lopte (pozicija lopte sledeceg frame-a), R2 <- za y poziciju
	;;R0 = 0
	
	check_left_player_collision:
	;;sub R0,R0,R0		;;R0 = 0 already
	
	ld R0,R0			;;R0 = &(ball.x)
	inc R0,R0			
	inc R0,R0			;;R0 = &(left_player.x)
	ld R3,R0			;;R3 = left_player.x
	inc R0,R0
	ld R4,R0			;;R4 = left_player.y
	
	;; check the x axis
	sub R3,R3,R1
	jmpnz check_left_player_collision_end  		;; x pozicija lopte je veca od x pozicije lijevog igraca 
	
	;; R3 ce od sada biti iskoristen kao registar opste namjene
	sub R3,R2,R4		;;ball.y - left_player.y < 0 then exit
	jmps LEFT_PLAYER_LOST
	
	inc R4,R4
	inc R4,R4
	inc R4,R4			;; R4 += 3;
	sub R3,R4,R2		;;ball.y - left_player.y+3 > 0 then exit
	jmpns LEFT_PLAYER_LOST
	;; R0 = 11 = &(left_player.y)
	
	;;SINCE THE BALL HASN'T hit the wall we must change the ball movement vector
	;;the code below sets the ball movement vector to the required value 
	;;Note: The jump labels will have a long name to avoid collisions
	
	;;Since
	;; R3 = R4-R2 = left_player.y+3 - ball.y
	mov R3,R3			;;set the ALU flags again
	
	;;If (3rd tile was hit) then ball_movement_vector = (1,1)
	jmpnz check_left_player_collision_BallMoveVector_down_right_jump
		sub R0,R0,R0
		ld R0,R0
		dec R0,R0		;; R0 = &(ball_movement_vector.y) = 7
		sub R3,R3,R3
		inc R3,R3		;; R3 = 1
		st R0,R3		;; ball_movement_vector.y = 1
		dec R0,R0		;; R0 = &(ball_movement_vector.x) = 6
		st R0,R3		;; ball_movement_vector.x = 1
		jmp check_collision_end			;;jump to the end of the section
	check_left_player_collision_BallMoveVector_down_right_jump:
	
	;;NOTE: Register status:
	;;R0 = 11, R4 = left_player.y+3, R2 = ball.y
	
	dec R3,R3			;; R3 = R4-R2 = left_player.y+3 - ball.y -1 => if (2nd tile was hit) then ball_movement_vector = (1,0)
	jmpnz check_left_player_collision_BallMoveVector_right_jump
		sub R0,R0,R0
		ld R0,R0
		dec R0,R0		;; R0 = &(ball_movement_vector.y) = 7
		sub R3,R3,R3
		st R0,R3		;; ball_movement_vector.y = 0	
		dec R0,R0		;; R0 = &(ball_movement_vector.x) = 6
		inc R3,R3		;; R3 = 1
		st R0,R3		;; ball_movement_vector.x = 1
		jmp check_collision_end
	check_left_player_collision_BallMoveVector_right_jump:
	
	;; Else, we hit the first tile. Then the ball_movement_vector = (1,-1)
		sub R0,R0,R0
		ld R0,R0
		dec R0,R0		;; R0 = &(ball_movement_vector.y) = 7
		sub R3,R3,R3
		dec R3,R3
		st R0,R3		;; ball_movement_vector.y = -1
		dec R0,R0		;; R0 = &(ball_movement_vector.x) = 6
		inc R3,R3
		inc R3,R3		;; R3 = 1
		st R0,R3		;; ball_movement_vector.x = 1
		jmp check_collision_end
	
	;;The ball movement vector is now set accordingly
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		check_left_player_collision_end:
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		check_right_player_collision:
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	sub R0,R0,R0
	inc R0,R0
	shl R0,R0
	inc R0,R0
	shl R0,R0
	shl R0,R0		;; R0 = 12 = &(right_player_pos.x)
	ld R3,R0
	inc R0,R0
	ld R4,R0		
	;; R3 <- x pos of the right player, R4 <- y pos of the right player
	;;NOTE: R1 = new ball.x and R2 = new ball.y position
	
	;; check the x axis
	sub R3,R3,R1
	jmpnz check_right_player_collision_end  		;; if (ball.x != right_player.x) then skip collision check
	
	;; R3 will be used as a temp register
	sub R3,R4,R2		;; if (right_player.y - ball.y > 0) then right_player lost
	jmpns RIGHT_PLAYER_LOST
	
	inc R4,R4
	inc R4,R4
	inc R4,R4			;; R4 += 3
	sub R3,R4,R2		;; if (right_player+3 - ball.y < 0) then right_player lost
	jmps RIGHT_PLAYER_LOST
	
	
	;;SINCE THE BALL HASN'T hit the wall we must change the ball movement vector
	;;the code below sets the ball movement vector to the required value and the jumps will have a long name to avoid collisions
	;; R3 = R4-R2 = right_player.y+3 - ball.y
	
	mov R3,R3
	;;If (3rd tile was hit) then ball_movement_vector = (-1,1)
	jmpnz check_right_player_collision_BallMoveVector_down_right_jump
		sub R0,R0,R0
		ld R0,R0
		dec R0,R0		;; R0 = &(ball_movement_vector.y) = 7
		sub R3,R3,R3
		inc R3,R3		
		st R0,R3		;; ball_movement_vector.y = 1
		dec R0,R0		;; R0 = &(ball_movement_vector.x) = 6
		dec R3,R3
		dec R3,R3
		st R0,R3		;; ball_movement_vector.x = -1
		jmp check_collision_end
	check_right_player_collision_BallMoveVector_down_right_jump:
	
	
	;;NOTE: R4 = left_player.y+3
	dec R3,R3			;; R3 = R4-R2 = left_player.y+3 - ball.y -1
	;;If (2nd tile was hit) then ball_movement_vector = (-1,0)
	jmpnz check_right_player_collision_BallMoveVector_right_jump
		sub R0,R0,R0
		ld R0,R0
		dec R0,R0		;; R0 = &(ball_movement_vector.y) = 7
		sub R3,R3,R3
		st R0,R3		;; ball_movement_vector.y = 0
		dec R0,R0		;; R0 = &(ball_movement_vector.x) = 6
		dec R3,R3
		st R0,R3		;; ball_movement_vector.x = -1
		jmp check_collision_end
	check_right_player_collision_BallMoveVector_right_jump:
	
	
	;; Else we shoot it up left (-1,-1)
		sub R0,R0,R0
		ld R0,R0
		dec R0,R0		;; R0 = &(ball_movement_vector.y) = 7
		sub R3,R3,R3
		dec R3,R3
		st R0,R3		;; ball_movement_vector.y = -1
		dec R0,R0		;; R0 = &(ball_movement_vector.x) = 6
		st R0,R3		;; ball_movement_vector.x = -1
		jmp check_collision_end
	
	;;The ball movement vector is now set accordingly
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		check_right_player_collision_end:
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		check_wall_collision:
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
	;; NOTE: R1 = ball.x and R2 = ball.y
	
	mov R2,R2				;; if (ball.y < 0) then ball_movement_vector = 1;
	jmpns check_lower_wall_bounds
		sub R0,R0,R0
		ld R0,R0			
		dec R0,R0			;;R0 = &(ball_movement_vector.y)
		sub R3,R3,R3
		inc R3,R3
		st R3,R0			;;ball_movement_vector.y = 1
		jmp check_wall_collision_end
	check_lower_wall_bounds:
	
	sub R0,R0,R0
	inc R0,R0
	shl R0,R0
	shl R0,R0
	shl R0,R0				;; R0 = 8
	sub R0,R0,R2			;;if (8-ball.y = 0) then ball_movement_vector.y = -1
	jmpnz check_wall_collision_end
		dec R0,R0			;; R0 = 7 = &(ball_movement_vector.y)
		sub R3,R3,R3
		dec R3,R3
		st R3,R0			;; ball_movement_vector = -1
		
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		check_wall_collision_end:
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
	
check_collision_end:
	


	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
			update_ball_position:
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;NOTE: new ball.x = R1 and new ball.y = R2 (could be out of bounds so we read from the RAM where we wrote the changes)
	
	;; Setup
	sub R0,R0,R0
	ld R0,R0		;;R0 = 8 = &(ball.x)
	ld R3,R0
	inc R0,R0
	ld R4,R0
	dec R0,R0		;;R3 = ball.x   R4 = ball.y
	dec R0,R0		;; R0 = 7
	ld R2,R0
	dec R0,R0
	ld R1,R0		;;R1 = ball_movement_vector.x  R2 = ball_movement_vector.y

	;;Change positions
	add R3,R3,R1
	add R4,R4,R2

	;;Store it
	sub R0,R0,R0
	ld R0,R0
	st R3,R0
	inc R0,R0
	st R4,R0
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;		ball position has been updated accordingly		;;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;




	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;;	TODO : HANDLE USER INPUT!!!!
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	;; 	R0 = tmp register
	;;	R1 = left_player.y
	;;	R2 = right_player.y
	;;	R3 = left_player_y_change
	;;	R4 = right_player_y_change
	;;	R6 = pb_dec = const

handle_input:
	;;Load in the values
	;;NOTE: The value of R6 was already saved inside the register at the start of the programm

handle_left_player_input:
	sub R0,R0,R0
	ld R0,R0
	inc R0,R0
	inc R0,R0		
	inc R0,R0		;;R0 = &left_player.y = 9
	ld R1,R0		;;R1 = left_player.y
	inc R0,R0
	inc R0,R0
	ld R2,R0		;;R2 = right_player.y

	
	ld R3,R6		
	jmpz skip_iPB_UP_handle
		;;Move right player up
		dec R2,R2
		jmpns skip_iPB_UP_handle_position_reset
			inc R2,R2
		skip_iPB_UP_handle_position_reset:
		jmp skip_iPB_RIGHT_handle					;;If both buttons are pressed we should only handle one input at a time
	skip_iPB_UP_handle:
	
	inc R6,R6
	ld R3,R6
	jmpz skip_iPB_RIGHT_handle
		;;Move right player down
		sub R0,R0,R0
		ld R0,R0		;;R0 = 8
		dec R0,R0		;;R0 = 7
		inc R2,R2		;;
		sub R0,R0,R2
		jmpns skip_iPB_RIGHT_handle_position_reset
			dec R2,R2
		skip_iPB_RIGHT_handle_position_reset:
	skip_iPB_RIGHT_handle:
	
	inc R6,R6
	ld R3,R6
	jmpz skip_iPB_DOWN_handle
		;;Move left player down
		sub R0,R0,R0
		ld R0,R0		;;R0 = 8
		dec R0,R0		;;R0 = 7
		inc R1,R1		;;
		sub R0,R0,R1
		jmpns skip_iPB_DOWN_handle_position_reset
			dec R1,R1
		skip_iPB_DOWN_handle_position_reset:
		jmp skip_iPB_LEFT_handle				;;If both buttons are pressed we should only handle one input at a time
	skip_iPB_DOWN_handle:
	
	inc R6,R6
	ld R3,R6
	jmpz skip_iPB_LEFT_handle
		;;Move left player up
		dec R1,R1
		jmpns skip_iPB_LEFT_handle_position_reset
			inc R1,R1
		skip_iPB_LEFT_handle_position_reset:
	skip_iPB_LEFT_handle:

	
	
	;;Write the positions back to RAM
	;;R1 = left_player.y
	;;R2 = right_player.y
	sub R0,R0,R0
	ld R0,R0		;;R0 = 8
	inc R0,R0
	inc R0,R0
	inc R0,R0		;;R0 = &left_player.y = 11
	st R1,R0		
	inc R0,R0
	inc R0,R0		;;R0 = &right_player.y = 13
	st R2,R0
	
	;;Reset R6 
	shr R0,R0		;;R0 = 6
	dec R0,R0
	ld R6,R0		;; R6 = 0x200 = pb_dec
	

;; loop indefinetely
jmp frame_sync_rising_edge

LEFT_PLAYER_LOST:
RIGHT_PLAYER_LOST:
	;; EXIT THE GAME SINCE THE PLAYER LOST
	;; End the game
	sub R0,R0,R0
		
		
